#!/usr/bin/env php
<?php

define('COLOR_GREEN', "\033[32m");
define('COLOR_RED', "\033[31m");
define('COLOR_YELLOW', "\033[33m");
define('COLOR_BLUE', "\033[34m");
define('COLOR_RESET', "\033[0m");

require_once __DIR__ . '/vendor/autoload.php';

use Illuminate\Database\Capsule\Manager as Capsule;

$dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
$dotenv->load();

require_once __DIR__ . '/config/database.php';

$command = $argv[1] ?? null;
$name = $argv[2] ?? null;


function makeController($name) {
    if (substr($name, -10) !== 'Controller') $name .= 'Controller';
    $stub = "<?php\n\nnamespace App\\Controllers;\n\nclass {$name} extends Controller\n{\n    public function index()\n    {\n        // Lógica del controlador aquí\n    }\n}\n";
    $path = __DIR__ . "/app/Controllers/{$name}.php";
    if (file_exists($path)) {
        echo COLOR_RED . "Error: El controlador {$name} ya existe.\n" . COLOR_RESET;
        return;
    }
    file_put_contents($path, $stub);
    echo COLOR_GREEN . "Controlador creado: " . COLOR_YELLOW . "app/Controllers/{$name}.php\n" . COLOR_RESET;
}

function makeModel($name) {
    $tableName = strtolower(preg_replace('/(?<!^)[A-Z]/', '_$0', $name)) . 's';
    $stub = "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass {$name} extends Model\n{\n    protected \$table = '{$tableName}';\n    protected \$fillable = [];\n}\n";
    $path = __DIR__ . "/app/Models/{$name}.php";
    if (file_exists($path)) {
        echo COLOR_RED . "Error: El modelo {$name} ya existe.\n" . COLOR_RESET;
        return;
    }
    file_put_contents($path, $stub);
    echo COLOR_GREEN . "Modelo creado: " . COLOR_YELLOW . "app/Models/{$name}.php\n" . COLOR_RESET;
}

function makeView($name) {
    $stub = "<!doctype html>\n<html lang=\"es\" data-bs-theme=\"dark\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>" . ucfirst($name) . "</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\">\n</head>\n<body>\n    <main class=\"container py-5\">\n        <h1 class=\"display-5\">Vista: " . ucfirst($name) . "</h1>\n        <p class=\"lead\">Este archivo se encuentra en <code>app/Views/{$name}.php</code></p>\n    </main>\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz\" crossorigin=\"anonymous\"></script>\n</body>\n</html>";
    $path = __DIR__ . "/app/Views/{$name}.php";
    if (file_exists($path)) {
        echo COLOR_RED . "Error: La vista {$name}.php ya existe.\n" . COLOR_RESET;
        return;
    }
    file_put_contents($path, $stub);
    echo COLOR_GREEN . "Vista creada: " . COLOR_YELLOW . "app/Views/{$name}.php\n" . COLOR_RESET;
}

function makeMiddleware($name) {
    if (substr($name, -10) !== 'Middleware') $name .= 'Middleware';
    $stub = "<?php\n\nnamespace App\\Middleware;\n\nclass {$name}\n{\n    public function handle()\n    {\n        // Lógica del middleware aquí\n    }\n}\n";
    $path = __DIR__ . "/app/Middleware/{$name}.php";
    if (file_exists($path)) {
        echo COLOR_RED . "Error: El middleware {$name} ya existe.\n" . COLOR_RESET;
        return;
    }
    if (!is_dir(dirname($path))) mkdir(dirname($path), 0755, true);
    file_put_contents($path, $stub);
    echo COLOR_GREEN . "Middleware creado: " . COLOR_YELLOW . "app/Middleware/{$name}.php\n" . COLOR_RESET;
}

function makeMigration($name) {
    $tableName = strtolower(str_replace('create_', '', str_replace('_table', '', $name)));
    $className = 'Create' . ucfirst(str_replace('_', '', ucwords($tableName, '_'))) . 'Table';

    $stub = "<?php\n\nuse Illuminate\\Database\\Capsule\\Manager as Capsule;\nuse Illuminate\\Database\\Schema\\Blueprint;\n\nclass {$className}\n{\n    public function up()\n    {\n        Capsule::schema()->create('{$tableName}', function (Blueprint \$table) {\n            \$table->id();\n            // Define las columnas de tu tabla aquí\n            \$table->timestamps();\n        });\n    }\n\n    public function down()\n    {\n        Capsule::schema()->dropIfExists('{$tableName}');\n    }\n}\n";

    $timestamp = date('Y_m_d_His');
    $filename = "{$timestamp}_create_{$tableName}_table.php";
    $path = __DIR__ . "/database/migrations/{$filename}";

    $existing = glob(__DIR__ . "/database/migrations/*_create_{$tableName}_table.php");
    if (!empty($existing)) {
        echo COLOR_RED . "Error: Ya existe una migración para la tabla '{$tableName}'.\n" . COLOR_RESET;
        return;
    }

    file_put_contents($path, $stub);
    echo COLOR_GREEN . "Migración creada: " . COLOR_YELLOW . "database/migrations/{$filename}\n" . COLOR_RESET;
}



switch ($command) {
    case 'serve':
        $host = 'localhost:8080';
        echo COLOR_GREEN . "✓ Servidor de desarrollo de PicoFrame iniciado.\n" . COLOR_RESET;
        echo COLOR_YELLOW . "  ➜  Local: " . COLOR_BLUE . "http://{$host}\n" . COLOR_RESET;
        echo "  Presiona " . COLOR_YELLOW . "Ctrl+C" . COLOR_RESET . " para detener el servidor.\n";
        exec("php -S {$host} -t public");
        break;

    case 'migrate':
        $dbName = $_ENV['DB_DATABASE'];
        try {
            $pdo = new PDO("{$_ENV['DB_CONNECTION']}:host={$_ENV['DB_HOST']}", $_ENV['DB_USERNAME'], $_ENV['DB_PASSWORD']);
            $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            $pdo->exec("CREATE DATABASE IF NOT EXISTS `$dbName`");
            echo COLOR_GREEN . "✓ Base de datos '{$dbName}' asegurada.\n" . COLOR_RESET;
        } catch (PDOException $e) {
            die(COLOR_RED . "❌ Error de conexión a la base de datos: " . $e->getMessage() . "\n" . COLOR_RESET);
        }
        
        echo COLOR_YELLOW . "Ejecutando migraciones...\n" . COLOR_RESET;
        $migrationPath = __DIR__ . '/database/migrations';
        $files = glob($migrationPath . '/*.php');
        
        foreach ($files as $file) {
            require_once $file;
            $className = pathinfo($file, PATHINFO_FILENAME);
            $classNameParts = explode('_', $className);
            $class = implode('', array_map('ucfirst', array_slice($classNameParts, 4)));

            if (class_exists($class)) {
                (new $class)->up();
                echo "  " . COLOR_GREEN . "✔ Migración ejecutada: " . COLOR_YELLOW . "{$className}\n" . COLOR_RESET;
            }
        }

        if (class_exists('App\Models\User')) {
            require_once __DIR__ . '/app/Models/User.php';
            if (!App\Models\User::where('email', 'test@example.com')->exists()) {
                App\Models\User::create(['name' => 'Test User', 'email' => 'test@example.com', 'password' => password_hash('password', PASSWORD_DEFAULT)]);
                echo COLOR_GREEN . "👤 Usuario de prueba creado (email: test@example.com, pass: password)\n" . COLOR_RESET;
            }
        }
        
        echo COLOR_GREEN . "¡Migraciones completadas!\n" . COLOR_RESET;
        break;
    

    case 'route:cache':
        echo COLOR_YELLOW . "Cacheando las rutas...\n" . COLOR_RESET;
        
        // Prepara el entorno sin ejecutar la app
        $container = require __DIR__ . '/config/container.php';
        $router = new \Bramus\Router\Router();
        
        // Carga las rutas en el objeto router
        require_once __DIR__ . '/routes/web.php';
        
        // Serializa el objeto router y lo guarda en la caché
        $cachePath = __DIR__ . '/storage/cache/routes.cache';
        file_put_contents($cachePath, serialize($router));
        
        echo COLOR_GREEN . "✓ Rutas cacheadas exitosamente.\n" . COLOR_RESET;
        break;

    case 'route:clear':
        $cachePath = __DIR__ . '/storage/cache/routes.cache';
        if (file_exists($cachePath)) {
            unlink($cachePath);
            echo COLOR_GREEN . "✓ Caché de rutas eliminada.\n" . COLOR_RESET;
        } else {
            echo COLOR_YELLOW . "No había caché de rutas que eliminar.\n" . COLOR_RESET;
        }
        break;

    case 'db:seed':
        require_once __DIR__ . '/database/seeders/DatabaseSeeder.php';
        echo COLOR_YELLOW . "Poblando la base de datos con datos de prueba...\n" . COLOR_RESET;
        (new \Database\Seeders\DatabaseSeeder())->run();
        echo COLOR_GREEN . "¡Base de datos poblada exitosamente!\n" . COLOR_RESET;
        break;

    case 'make:controller':
        if (!$name) die(COLOR_RED . "Error: Debes especificar un nombre.\n" . COLOR_RESET . "Ejemplo: ./pico make:controller ProductController\n");
        makeController(ucfirst($name));
        break;
        
    case 'make:model':
        if (!$name) die(COLOR_RED . "Error: Debes especificar un nombre.\n" . COLOR_RESET . "Ejemplo: ./pico make:model Product\n");
        makeModel(ucfirst($name));
        break;

    case 'make:view':
        if (!$name) die(COLOR_RED . "Error: Debes especificar un nombre.\n" . COLOR_RESET . "Ejemplo: ./pico make:view products\n");
        makeView(strtolower($name));
        break;

    case 'make:middleware':
        if (!$name) die(COLOR_RED . "Error: Debes especificar un nombre.\n" . COLOR_RESET . "Ejemplo: ./pico make:middleware Admin\n");
        makeMiddleware(ucfirst($name));
        break;

    case 'make:migration':
        if (!$name) die(COLOR_RED . "Error: Debes especificar un nombre para la migración.\n" . COLOR_RESET . "Ejemplo: ./pico make:migration create_posts_table\n");
        makeMigration($name);
        break;

    case 'key:generate':
        $key = 'base64:' . base64_encode(random_bytes(32));
        if (!file_exists('.env')) {
            echo COLOR_RED . "Error: El archivo .env no existe. Cópialo desde .env.example primero.\n" . COLOR_RESET;
            break;
        }
        $envContent = file_get_contents('.env');
        $envContent = preg_replace('/^JWT_SECRET=.*$/m', 'JWT_SECRET=' . $key, $envContent);
        file_put_contents('.env', $envContent);
        echo COLOR_GREEN . "✓ Clave de aplicación generada exitosamente en el archivo .env.\n" . COLOR_RESET;
        break;

    default:
        echo COLOR_BLUE . "PicoFrame CLI 🚀\n\n" . COLOR_RESET;
        echo COLOR_YELLOW . "Uso:\n" . COLOR_RESET;
        echo "  comando [argumento]\n\n";
        echo COLOR_YELLOW . "Comandos disponibles:\n" . COLOR_RESET;
        echo "  " . COLOR_GREEN . "serve" . COLOR_RESET . "                   Inicia el servidor de desarrollo.\n";
        echo "  " . COLOR_GREEN . "migrate" . COLOR_RESET . "                 Ejecuta las migraciones de la base de datos.\n";
        echo "  " . COLOR_GREEN . "db:seed" . COLOR_RESET . "                 Puebla la base de datos con datos de prueba.\n\n";
        echo COLOR_YELLOW . "Seguridad:\n" . COLOR_RESET;
        echo "  " . COLOR_GREEN . "key:generate" . COLOR_RESET . "              Genera una nueva clave JWT y la guarda en .env.\n\n";
        echo COLOR_YELLOW . "Comandos de caché:\n" . COLOR_RESET;
        echo "  " . COLOR_GREEN . "route:cache" . COLOR_RESET . "             Genera el archivo de caché de rutas para producción.\n";
        echo "  " . COLOR_GREEN . "route:clear" . COLOR_RESET . "             Elimina el archivo de caché de rutas.\n\n";
        echo COLOR_YELLOW . "Generadores:\n" . COLOR_RESET;
        echo "  " . COLOR_GREEN . "make:controller" . COLOR_RESET . " <Nombre>  Crea un nuevo controlador.\n";
        echo "  " . COLOR_GREEN . "make:model" . COLOR_RESET . " <Nombre>       Crea un nuevo modelo Eloquent.\n";
        echo "  " . COLOR_GREEN . "make:view" . COLOR_RESET . " <nombre>        Crea una nueva vista.\n";
        echo "  " . COLOR_GREEN . "make:middleware" . COLOR_RESET . " <Nombre>  Crea un nuevo middleware.\n";
        echo "  " . COLOR_GREEN . "make:migration" . COLOR_RESET . " <nombre>   Crea un nuevo archivo de migración.\n";
        break;
}